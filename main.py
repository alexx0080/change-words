# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import aiogram, asyncio, random, config, time, table_with_words
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup



# –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
all_chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ',', '?', '!', '+', '-', '*', '/']


# –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å
queue = []


# –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TableWord
word_obj = table_with_words.TableWords()



# –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
class AddWord(StatesGroup):
    get_eng_word = State()
    get_translate = State()

# –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
class GetWord(StatesGroup):
    get_translate = State()



# –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
bot = Bot(config.TOKEN)
dp = Dispatcher()



# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message(CommandStart())
async def command_start(message: Message):
    button_add_word = InlineKeyboardButton(text='üìö –î–æ–±–∞–≤–∏—Ç—å üìö', callback_data='add_word')
    button_get_word = InlineKeyboardButton(text='üì© –ü–æ–ª—É—á–∏—Ç—å üì©', callback_data='get_word')
    button = InlineKeyboardMarkup(inline_keyboard=[[button_add_word], [button_get_word]])
    await message.answer('–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–ª–æ–≤! üòÉ\n–ü–∏—à–∏ –º–Ω–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥, —è –∏—Ö –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ \
–∫–æ–≥–¥–∞ —Ç—ã –º–µ–Ω—è –ø–æ–ø—Ä–æ—Å–∏—à—å –≤—ã—Å—ã–ª–∞—Ç—å –∏—Ö —Ç–µ–±–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥.', reply_markup=button)
    


# –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
async def menu(message: Message):
    button_add_word = InlineKeyboardButton(text='üìö –î–æ–±–∞–≤–∏—Ç—å üìö', callback_data='add_word')
    button_get_word = InlineKeyboardButton(text='üì© –ü–æ–ª—É—á–∏—Ç—å üì©', callback_data='get_word')   
    button = InlineKeyboardMarkup(inline_keyboard=[[button_add_word], [button_get_word]])
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=button)
    


# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ + –∫–Ω–æ–ø–∫–∞
@dp.message(Command('add_word'))
async def add_word_func(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ')
    await state.set_state(AddWord.get_eng_word)

@dp.message(AddWord.get_eng_word)
async def get_english_word(message: Message, state: FSMContext):
    eng_word = message.text
    eng_word = eng_word.lower()
    list_words = word_obj.read_table()
    if eng_word not in list_words:
        if this_word_contain_only_letter(eng_word) == True:
            await state.update_data(english_word = eng_word)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥')
            await state.set_state(AddWord.get_translate)
        else:
            await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ ‚ö†Ô∏è')
    else:
        translate = word_obj.read_string(eng_word)
        await message.answer(f'‚ùó –°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚ùó\n–í–æ—Ç –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ - {translate.capitalize()}')
        await state.clear()
    

@dp.message(AddWord.get_translate)
async def get_translate(message: Message, state: FSMContext):
    trans = message.text
    if this_word_contain_only_letter(trans) == True:
        trans = trans.lower()
        await state.update_data(translate = trans)
        dictionary = await state.get_data()
        eng_word = dictionary['english_word']
        rus_word = dictionary['translate']
        await state.clear()
        word_obj.add_notice(eng_word, rus_word)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! ‚úÖ')
        await menu(message)
    else:
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ ‚ö†Ô∏è')

# Button
@dp.callback_query(F.data == 'add_word')
async def add_word_button(callback: CallbackQuery, state: FSMContext):
    await add_word_func(callback.message, state)


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏—Ç—å + –∫–Ω–æ–ø–∫–∞ get_word
@dp.message(Command('get_word'))
async def get_word_func(message: Message, state: FSMContext):
    list_words = word_obj.read_table()
    random_word = random.choice(list_words)
    while random_word in queue:
        random_word = random.choice(list_words)
    await state.update_data(english_word = random_word)
    await message.answer(f'''–ò—Ç–∞–∫, –≤–æ—Ç —Ç–≤–æ–µ —Å–ª–æ–≤–æ - {random_word.capitalize()}\n–ü–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ''')
    await state.set_state(GetWord.get_translate)

@dp.message(GetWord.get_translate)
async def get_translate_get_word(message: Message, state: FSMContext):
    translate = message.text
    if this_word_contain_only_letter(translate) == True:
        dictionary = await state.get_data()
        eng_word = dictionary['english_word']
        true_translate = word_obj.read_string(eng_word)
        if translate.lower() == true_translate:
            await message.answer('–ú–æ–ª–æ–¥–µ—Ü, –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! ‚úÖ')
            add_word_in_queue(eng_word)
        else:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå\n–≠—Ç–æ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ {true_translate.capitalize()}.')
        await state.clear()
        await menu(message)
    else:
        await message.answer(f'‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ ‚ö†Ô∏è')

# Button
@dp.callback_query(F.data == 'get_word')
async def get_word_button(callback: CallbackQuery, state: FSMContext):
    await get_word_func(callback.message, state)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞
def this_word_contain_only_letter(word):
    only_letters = True
    for letter in word:
        if letter in all_chars:
            only_letters = False
            break
    return only_letters



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
def add_word_in_queue(word):
    if len(queue) < 50:
        queue.append(word)
    else:
        queue.remove(queue[0])
        queue.append(word)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message()
async def random_data(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥\n\
üóÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\nüìå /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n\
üìå /add_word - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\nüìå /get_word - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ')



# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except:
        print('goodbye!')